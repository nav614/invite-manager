/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SignupImport } from './routes/signup'
import { Route as LogoutImport } from './routes/logout'
import { Route as LoginImport } from './routes/login'
import { Route as AuthorizedImport } from './routes/_authorized'
import { Route as IndexImport } from './routes/index'
import { Route as AuthorizedInvitesReceivedImport } from './routes/_authorized/invites-received'
import { Route as AuthorizedInvitesGivenImport } from './routes/_authorized/invites-given'

// Create/Update Routes

const SignupRoute = SignupImport.update({
  path: '/signup',
  getParentRoute: () => rootRoute,
} as any)

const LogoutRoute = LogoutImport.update({
  path: '/logout',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const AuthorizedRoute = AuthorizedImport.update({
  id: '/_authorized',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AuthorizedInvitesReceivedRoute = AuthorizedInvitesReceivedImport.update({
  path: '/invites-received',
  getParentRoute: () => AuthorizedRoute,
} as any)

const AuthorizedInvitesGivenRoute = AuthorizedInvitesGivenImport.update({
  path: '/invites-given',
  getParentRoute: () => AuthorizedRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_authorized': {
      id: '/_authorized'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthorizedImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/logout': {
      id: '/logout'
      path: '/logout'
      fullPath: '/logout'
      preLoaderRoute: typeof LogoutImport
      parentRoute: typeof rootRoute
    }
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupImport
      parentRoute: typeof rootRoute
    }
    '/_authorized/invites-given': {
      id: '/_authorized/invites-given'
      path: '/invites-given'
      fullPath: '/invites-given'
      preLoaderRoute: typeof AuthorizedInvitesGivenImport
      parentRoute: typeof AuthorizedImport
    }
    '/_authorized/invites-received': {
      id: '/_authorized/invites-received'
      path: '/invites-received'
      fullPath: '/invites-received'
      preLoaderRoute: typeof AuthorizedInvitesReceivedImport
      parentRoute: typeof AuthorizedImport
    }
  }
}

// Create and export the route tree

interface AuthorizedRouteChildren {
  AuthorizedInvitesGivenRoute: typeof AuthorizedInvitesGivenRoute
  AuthorizedInvitesReceivedRoute: typeof AuthorizedInvitesReceivedRoute
}

const AuthorizedRouteChildren: AuthorizedRouteChildren = {
  AuthorizedInvitesGivenRoute: AuthorizedInvitesGivenRoute,
  AuthorizedInvitesReceivedRoute: AuthorizedInvitesReceivedRoute,
}

const AuthorizedRouteWithChildren = AuthorizedRoute._addFileChildren(
  AuthorizedRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof AuthorizedRouteWithChildren
  '/login': typeof LoginRoute
  '/logout': typeof LogoutRoute
  '/signup': typeof SignupRoute
  '/invites-given': typeof AuthorizedInvitesGivenRoute
  '/invites-received': typeof AuthorizedInvitesReceivedRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof AuthorizedRouteWithChildren
  '/login': typeof LoginRoute
  '/logout': typeof LogoutRoute
  '/signup': typeof SignupRoute
  '/invites-given': typeof AuthorizedInvitesGivenRoute
  '/invites-received': typeof AuthorizedInvitesReceivedRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_authorized': typeof AuthorizedRouteWithChildren
  '/login': typeof LoginRoute
  '/logout': typeof LogoutRoute
  '/signup': typeof SignupRoute
  '/_authorized/invites-given': typeof AuthorizedInvitesGivenRoute
  '/_authorized/invites-received': typeof AuthorizedInvitesReceivedRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/login'
    | '/logout'
    | '/signup'
    | '/invites-given'
    | '/invites-received'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/login'
    | '/logout'
    | '/signup'
    | '/invites-given'
    | '/invites-received'
  id:
    | '__root__'
    | '/'
    | '/_authorized'
    | '/login'
    | '/logout'
    | '/signup'
    | '/_authorized/invites-given'
    | '/_authorized/invites-received'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthorizedRoute: typeof AuthorizedRouteWithChildren
  LoginRoute: typeof LoginRoute
  LogoutRoute: typeof LogoutRoute
  SignupRoute: typeof SignupRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthorizedRoute: AuthorizedRouteWithChildren,
  LoginRoute: LoginRoute,
  LogoutRoute: LogoutRoute,
  SignupRoute: SignupRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_authorized",
        "/login",
        "/logout",
        "/signup"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_authorized": {
      "filePath": "_authorized.tsx",
      "children": [
        "/_authorized/invites-given",
        "/_authorized/invites-received"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/logout": {
      "filePath": "logout.tsx"
    },
    "/signup": {
      "filePath": "signup.tsx"
    },
    "/_authorized/invites-given": {
      "filePath": "_authorized/invites-given.tsx",
      "parent": "/_authorized"
    },
    "/_authorized/invites-received": {
      "filePath": "_authorized/invites-received.tsx",
      "parent": "/_authorized"
    }
  }
}
ROUTE_MANIFEST_END */
